generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CANDIDATE
  EMPLOYER
  ADMIN
}

enum OnboardingStep {
  INITIAL_DETAILS
  LOCATION_DETAILS
  AVIALABILITY_DETAILS
}

enum HealthcareRole {
  CNA
  LPN
  RN
  PCA
  HHA
  OTHER
}

enum CertificationStatus {
  Certified
  NotCertified
  Pending
  Inprogress
}

enum WorkType {
  FullTime
  PartTime
  PerDiem
  LiveIn
}

enum ShiftType {
  Day
  Night
  Weekend
  Overnight
  Flexible
}

enum JobStatus {
  WorkingFullTime
  WorkingFullTimeAvailable
  WorkingPartTimeAvailable
  NotWorkingAvailable
  NotWorkingOpenOffers
}

model projects {
  id          String    @id() @default(uuid())
  name        String    @db.VarChar
  description String?   @db.VarChar
  status      String    @default("active") @db.VarChar
  startDate   DateTime? @db.Date
  endDate     DateTime? @db.Date
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  tasks       tasks[]
}

model tasks {
  id           String   @id @default(uuid())
  title        String
  description  String?
  status       String   @default("pending")
  dueDate      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  projectId    String?
  assignedToId String?

  assignedTo   users?     @relation("UserTasks", fields: [assignedToId], references: [id])
  projects     projects?  @relation(fields: [projectId], references: [id])
}

model users {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks     tasks[]   @relation("UserTasks")
  candidate candidates?

  @@index([email])
  @@unique([email, role])
}

model candidates {
  id                    String   @id @default(uuid())
  name                  String
  email                 String   @unique
  userId                String   @unique
  healthcareRole        HealthcareRole
  certificationStatus   CertificationStatus
  zipCode               String?  // nullable
  address               String?  // nullable
  maxTravelDistance     Int?     // stored in minutes; nullable
  workType              WorkType[]        // multiple select
  shiftType             ShiftType[]       // multiple select
  currentJobStatus      JobStatus?
  step                  OnboardingStep
  isOnboarded           Boolean  @default(false)
  isActive              Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // relation
  user                  users    @relation(fields: [userId], references: [id])

  @@index([email,name])
  @@unique([email,userId])
}
